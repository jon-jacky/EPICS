# remove $(ROOM): $(ROOM="Iso"): and Collimator: prefixes throughout
# replace "$(ODLY="80")" with "80"


# Calculate enabling conditions for Collimator subsystem AutoSetup
# Too many conditions to fit into 40 char CALC limit so split into two records
record(calcout, "Subsystem:AutoSetup") {
  # all of these interlocks must be clear
  field(INPA, "LCCError:Status")
  field(INPB, "LCCSetup:Status")
  field(INPC, "LCCCal:Status")
  # leaf motion must be in automatic mode -  FIXME make like this in FilterWedge
  field(INPD, "LeafMotion:ControlAuto")
  field(CALC, "A&&B&&C&&D") # all interlocks clear, control auto
  field(OOPT, "When Non-zero") # when CALC is True, that is when intlks clear
  field(DOPT, "Use CALC")
  field(OUT, "LeafMotion:CheckUI.PROC PP") 
}

# Calculate more enabling conditions for Collimator subsystem AutoSetup
record(scalcout, "LeafMotion:CheckUI") {
  # one of these screens must be displayed
  field(INAA, "UI:Panel")
  field(BB, "summary.edl")
  field(CC, "collimator.edl")
  field(DD, "plc_motion.edl") # helpful for debugging
  field(EE, "plc_status.edl") # ditto
  field(CALC, "AA==BB||AA==CC||AA==DD||AA==EE") # one of these screens is displayed
  field(OOPT, "When Non-zero")
  field(DOPT, "Use CALC")
  # That's all the enabling conditions, now start
  field(OUT, "LeafMotion:Start.PROC PP") 
}

# FIXME still more enabling conditions should be added:
# prescribed settings must be in range, and prescribed leaves must not collide

record(seq, "LeafMotion:Start") {
  field(SELM, "All")
  field(DOL1, "1") # Turn on RequestEnabled
  field(LNK1, "LeafMotion:RequestEnabled PP")
  # Must send timeout interval in integer seconds to :Timeout.B, see Timeout record below
  field(DOL4, "80")
  field(LNK4, "LeafMotion:Timeout.B")
  # up to 6 LNK
}

# just fixed csv files so this gets FLNK from LeafMotion:DriveEnabled
record(fanout, "LeafMotion:DriveEnabledFanout") {
  field(SELM, "All")
  field(LNK1, "MotionSafety:Status")
  field(LNK2, "LeafMotion:RunStart")
  # up to 6 LNK
}

# When DriveEnabled comes on when RequestEnbled and Auto Setup intlk set, send CON RUN
# would like to trigger this from DriveEnabled, otherwise must poll
# Now DriveEnable FLNK in .csv goes to MotionSafety:Status, to use it here we need fanout.
#  oh, but that FLNK is coded into csv2bi.py, we'd have to make special case, grr.
#  do it, better than trying to pick it off the end of the C&C intlk calc chain.
#  tried to edit csv2bi.py but didn't get the effect I expected, svn revert csv2bi -- !?
record(calcout, "LeafMotion:RunStart") {
  # Now we have FLNK from LeafMotion:DriveEnabled so we don't need periodic scan
  # field(SCAN, "1 second") # FIXME: FLNK from DriveEnabled would be better, but see above
  field(INPA, "LeafMotion:DriveEnabled")
  field(CALC, "A")
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Zero")
  field(OUT, "LCC:AutoSetup.PROC PP") # send CON RUN to LCC
}

# lcc.proto autosetup protocol assigns AA field here
#  assigns AA to ' ' when protocol sends CON RUN, assigns '$' when protocol completes
# It is like an INPA link from LCC:AutoSetup but there is no explicit INPA field here
# This record sends 0 to OUT, :Timeout when CON RUN completes
#  which forces :Timeout to expire immediately by assigning 0 to its VAL
# To make sure this record processes when it is needed, SCAN must poll
record(scalcout, "LeafMotion:RunStop") {
  field(SCAN, "1 second") # Is this necessary?  Can't lcc.proto write to some .PROC ?
  field(AA, " ") # space, ack character - indicates CON RUN has *not* completed
  field(CALC, "AA!='$'")  # Neg logic, goes to zero to indicate CON RUN has completed
  field(DOPT, "Use CALC")
  field(OOPT, "Transition To Zero") # only when "$" arrives
  # send 0 to Timeout.VAL
  field(OUT, "LeafMotion:Timeout.VAL PP")
  field(PINI, "1")
}

# stop auto setup when timeout expires
# based on Tim Mooney, http://www.aps.anl.gov/epics/tech-talk/2012/msg01327.php
# a - Timer register, counts down from timeout interval to 0
#       assign timeout interval > 0 to Timeout.A to start or reset timer
#       assign 0 to Timeout.VAL (or just Timeout) to force immediate timeout and send OUT 
#     BUT can't write directly to Timeout.A because it will be overwritten by VAL via INPA
#       instead write to Timeout.B, see below
# c - Countdown enable, must be nonzero to enable a to count down
#      Write 0 to Timeout.C to freeze countdown or cancel timeout, nonzero to resume
# b - Write timeout interval > 0 to Timeout.B to assign it to both a and c
#      Initializes both a and c, needed after c has been set to 0 to cancel timeout
#      Needed to set a because otherwise a will be overwritten by VAL via INPA
record(calcout, "LeafMotion:Timeout") {
  field(SCAN, "1 second") # so a is timer interval in seconds
  field(INPA, "LeafMotion:Timeout.VAL")
  field(CALC, "b?b:(a&&c?a-1:a);c:=(b?b:c);b:=0") # 33 chars, max 36
  field(OOPT, "Transition To Zero")
  field(DOPT, "Use CALC")
  field(OUT, "LeafMotion:Disable.PROC PP")
}

# when auto setup stops, disable motion, enable poll
record(seq, "LeafMotion:Disable") {
  field(SELM, "All")
  field(DOL1, "0") # turn off RequestEnabled
  field(LNK1, "LeafMotion:RequestEnabled PP") 
  # up to 10 DOL/LNK 
}

# Auto Setup interlock - just the negation of RequestEnabled
record(calcout, "LCCSetup:Calc") {
  field(INPA, "LeafMotion:RequestEnabled")
  field(CALC, "!A")
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCSetup:Status PP")
}
# remove  $(ROOM): $(ROOM="Iso"): Iso:Collimator: Collimator:  Iso:
# replace DOL1, 0 with DOL1, "0"

# So we can control diagnostic messages via asyn traceMask, alternative to 
#  dbLoadRecords("db/asynRecord.db","P=Iso,R=LCC:Asyn,PORT=lcc,ADDR=0,OMAX=0,IMAX=0")
record(asyn, "LCC:Asyn"){
  field(PORT, "lcc") # must match port in drvAsynIPPortConfigure
  # let ADDR, OMAX, IMAX fields default to 0
}

# These stream records for protocols do not require the asyn record above
record(stringin, "LCC:Test") {
  field(SCAN, "Passive") # caput LCC:Test.PROC 1 to force processing
  field(DTYP, "stream")
  # INP, "@file protocol port" where port must match drvAsynIPPortConfigure
  field(INP, "@lcc.proto test lcc") # Just writes "LCC " to serial port
}

# Do not disable reset if LCCError interlock is set, use reset to clear it
record(stringin, "LCC:Reset") {
  field(SCAN, "Passive")
  field(DTYP, "stream")
  field(INP, "@lcc.proto reset lcc") # out ESC CR, in to stringin VAL
  field(PINI, "1") # force reset at startup
  field(FLNK, "LCC:ResetCalc") # set LCC intlk if reset fails
}

# Disable polling if LCCError interlock OR LCCSetup interlock is set
record(calc, "LCC:PollDisable") {
  field(INPA, "LCCError:Status")
  field(INPB, "LCCSetup:Status")
  field(INPC, "LCCInit:Status")
  # negative logic - output is 0 (intlk set) when any input is 0
  field(CALC, "A&&B&&C")
  field(PINI, "1") # apparently not effective - still have to dbpf ....PollDisable.PROC 1
}

# Poll
record(stringin, "LCC:Poll") {
  field(SCAN, "Passive") # For production, use 2 seconds
  field(DTYP, "stream")
  field(INP, "@lcc.proto poll lcc") # out OUT ALL, in to :Actual PVs
  field(SDIS, "LCC:PollDisable")
  field(DISA, "0")
  field(DISV, "0")
  field(FLNK, "LCC:PollCalc") # set LCC intlk if poll fails
}


# PollIndicator - indicate polling by toggling Dosimetry:RelayError:Status
#  which is not connected to anything in the test version
# Just for tesing PollDisable logic - omit from production version
record(calcout, "LCC:PollIndicator") {
  field(SCAN, "2 second")
  field(INPA, "Dosimetry:RelayError:Status")
  field(CALC, "!A") # flip bit each time
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "Dosimetry:RelayError:Status PP")
  field(SCAN, "2 second") # For production, use 2 second
  field(SDIS, "LCC:PollDisable")
  field(DISA, "0")
  field(DISV, "0")
}

# In commands to lcc.proto, do *not* disable with SDIS ...:LCCError:Status
# We must be able to send commands to LCC to clear errors even when error intlk set
# If it is necessary to inhibit these *sometimes*, use upstream logic not SDIS

record(stringin, "LCC:SendCal") {
  field(SCAN, "Passive") # FIXME Test in silver.  Live test, production use 1 sec
  field(DTYP, "stream")
  field(INP, "@lcc.proto sendcal lcc") # out OUT ALL, in to :Actual PVs
  field(FLNK, "LCC:SendCalCalc") # set LCC intlk if poll fails
}

record(stringin, "LCC:ReadBackCal") {
  field(SCAN, "Passive") # FIXME Test in silver.  Live test, production use 1 sec
  field(DTYP, "stream")
  field(INP, "@lcc.proto readbackcal lcc") # out OUT ALL, in to :Actual PVs
  field(FLNK, "LCC:ReadBackCalCalc") # set LCC intlk if poll fails
}

record(stringin, "LCC:SelectField") {
  field(SCAN, "Passive") # FIXME Test in silver.  Live test, production use 1 sec
  field(DTYP, "stream")
  field(INP, "@lcc.proto selectfield lcc") # out OUT ALL, in to :Actual PVs
  field(FLNK, "LCC:SelectFieldCalc") # set LCC intlk if poll fails
}

record(stringin, "LCC:AutoSetup") {
  field(SCAN, "Passive") # FIXME Test in silver.  Live test, production use 1 sec
  field(DTYP, "stream")
  field(INP, "@lcc.proto autosetup lcc") # out OUT ALL, in to :Actual PVs
  field(FLNK, "LCC:AutoSetupCalc") # set LCC intlk if poll fails
}

# Interlock is clear if most recent command succeeded, NO_ALARM (zero)
# a. transition from 0 0 to 1 0 or 0 1 should send 0
# b. transition from 1 0 or 0 1 to  0 0 should send 1
# c. transition from 1 0 or 0 1 to  1 1 should remain at 0
# d. transition from 1 1 to 1 0 or 0 1 should send 1
# Look at a vs d - we can't do it with boolean expression - it's history dependent
# We need *individual* calcout for both :Reset and :Poll

# Set interlock if most recent command failed, *not* NO_ALARM (nonzero)
record(calcout, "LCC:ResetCalc") {
  field(INPA, "LCC:Reset.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

# Set interlock if most recent command failed, *not* NO_ALARM (nonzero)
record(calcout, "LCC:PollCalc") {
  field(INPA, "LCC:Poll.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

record(calcout, "LCC:SendCalCalc") {
  field(INPA, "LCC:SendCal.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

record(calcout, "LCC:ReadBackCalCalc") {
  field(INPA, "LCC:ReadBackCal.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

record(calcout, "LCC:SelectFieldCalc") {
  field(INPA, "LCC:SelectField.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

record(calcout, "LCC:AutoSetupCalc") {
  field(INPA, "LCC:AutoSetup.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

# For testing alarm .STAT -> Calc -> LCCError via caput
record(bo, "LCC:Alarm") {
    field(ZNAM, "zero, no alarm")
    field(ONAM, "one, minor alarm")
    field(ZSV, "NO_ALARM")
    field(OSV, "MINOR")
#    field(VAL, "0")
#    field(PINI, "1") # so .STAT is initially NO_ALARM not UDF
    field(FLNK, "LCC:AlarmCalc") # set LCC intlk if poll fails
}

# Set interlock if :Alarm is in an alarm state, *not* NO_ALARM (nonzero)
record(calcout, "LCC:AlarmCalc") {
  field(INPA, "LCC:Alarm.STAT")
  field(CALC, "!A") # 0 means NO_ALARM but 1 means interlock clear (safe)
  field(OOPT, "Every Time")
  field(DOPT, "Use CALC")
  field(OUT, "LCCError:Status PP")
}

# LCC interlocks, moved here from sw_interlock.substitutions on 12 Sep 2013

record(bo, "LCCError:Status")
{ 
    field(DESC,"No LCC Error")
    field(ZNAM,"LCC Error") # interlock set condition, opposite of DESC
    field(ONAM,"No LCC Error") # usually the same as DESC but only string[20]
    field(FLNK, "LCCError:Fanout")
}

record(fanout, "LCCError:Fanout") {
    field(LNK1, "LCC:PollDisable") 
    field(LNK2, "Subsystem:Calc")
    field(SELM, "All")
    # up to 6 LNK
}

record(bo, "LCCSetup:Status")
{ 
    field(DESC,"No LCC Auto Set-Up")
    field(ZNAM,"LCC Auto Set-Up") # interlock set condition, opposite of DESC
    field(ONAM,"No LCC Auto Set-Up") # usually the same as DESC but only string[20]
    field(FLNK, "LCCSetup:Fanout")
}

record(fanout, "LCCSetup:Fanout") {
    field(LNK1, "LCC:PollDisable") 
    field(LNK2, "Subsystem:Calc")
    field(SELM, "All")
    # up to 6 LNK
}

record(bo, "LCCCal:Status")
{ 
    field(DESC,"Leaf Calibration Available")
    field(ZNAM,"No Leaf Calibration") # interlock set condition, opposite of DESC
    field(ONAM,"Leaf Calibration OK") # usually the same as DESC but only string[20]
    field(FLNK, "Subsystem:Calc")
}

record(bo, "LCCInit:Status")
{ 
    field(DESC,"LCC initialized")
    field(ZNAM,"LCC init in progress") # interlock set condition, opposite of DESC
    field(ONAM,"LCC initialized") # usually the same as DESC but only string[20]
    field(FLNK, "LCCInit:Fanout")
}

record(fanout, "LCCInit:Fanout") {
    field(LNK1, "LCC:PollDisable") 
    field(LNK2, "Subsystem:Calc")
    field(SELM, "All")
    # up to 6 LNK
}

# gets LNK from NewField:Fanout in session.db
record(seq, "Session:NewField:Seq") {
  field(SELM, "All")
  field(DOL1, "0") # Set the interlock
  field(LNK1, "LCCInit:Status") # 0 indicates initialization in progress
  field(DOL2, "' '") # Indicate initialization has started
  field(LNK2, "LCC:CalDone.AA") # ' ' indicates initialization in progress
  # up to 10 DOL/LNK pairs
}

# lcc.proto readbackcal protocol assigns AA field here
#  assigns AA to ' ' when protocol begins select field, assigns '$' when window protocol done.
# It is like an INPA link from LCC:SelectField but there is no explicit INPA field here
# This record sends 1 to OUT, LCCInit:Status when select field protocol completes
# To make sure this record processes when it is needed, SCAN must poll
record(scalcout, "LCC:CalDone") {
  field(SCAN, "1 second") # Is this necessary?  Can't lcc.proto write to some .PROC ?
  field(AA, " ") # space, ack character - indicates CON RUN has *not* completed
  field(CALC, "AA=='$'")  # Pos logic, goes to 1 to indicate protocol has completed
  field(DOPT, "Use OCAL") # for some reason sending CALC 1 gets error from LCCInit:Status:
  field(OCAL, "'LCC initialized'") # Illegal choice PV: Iso:Collimator:LCCInit:Status 1.00000000
  field(OOPT, "Transition To Non-zero") # only when "$" arrives
  # send 1 to ...
  field(OUT, "LCCInit:Status PP")
  field(PINI, "1")
}
